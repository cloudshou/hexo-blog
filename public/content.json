{"meta":{"title":"许进|沉思录","subtitle":null,"description":"www.xujin.org,xujin.org,-许进沉思录,云首科技有限公司,云计算，大数据，物联网，Software_king的博客,云计算Saas，云计算Paas，云计算Iaas Hadoop，大数据，JavaEE，Java，物联网，Hadoop， NoSQL，MongoDB,Spring, Hibernate,Struts2,Shiro,Spring Security Activiti,JBPM","author":"Software_King","url":"http://blog.xujin.org"},"pages":[{"title":"Tags","date":"2016-10-16T10:30:59.477Z","updated":"2016-10-16T10:30:23.122Z","comments":true,"path":"tags/index.html","permalink":"http://blog.xujin.org/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2016-10-16T10:30:59.472Z","updated":"2016-10-16T10:30:23.121Z","comments":true,"path":"about/index.html","permalink":"http://blog.xujin.org/about/index.html","excerpt":"","text":"典型的90后，程序猿，软件工程专业，研究方向云计算,互联网和物联网。目前就职于唯品会平台架构部。Spring Cloud中国社区发起者， 曾参与基于云计算Iaas的平安科技云平台和国泰君安证卷云平台的开发，以及基于云计算Saas平台的云销售管理系统的开发等。熟练运用各种流行的JavaEE技术进行组合式架构设计与开发。业余时间研究Docker，Zstack，Mycat,Ice等开源项目，以及软件架构设计，程序性能优化，JVM，高并发等！软件世界就是模拟客观世界，从而需求分析，技术驱动，改造世界！网站: http://www.xujin.org博客: http://blog.xujin.orgSpring Cloud中国社区地址:http://springcloud.cn"}],"posts":[{"title":"Spring Cloud微服务框架主要子项目和RPC框架的对比","slug":"spring-cloud-introduce","date":"2016-10-17T07:41:21.081Z","updated":"2016-10-17T11:40:57.976Z","comments":true,"path":"2016/10/17/spring-cloud-introduce/","link":"","permalink":"http://blog.xujin.org/2016/10/17/spring-cloud-introduce/","excerpt":"摘要:Spring Cloud是一个相对比较新的微服务框架，今年(2016)推出1.0的release版本，目前Github上更新速度很快. 虽然Spring Cloud时间最短, 但是相比Dubbo等RPC框架, Spring Cloud提供的全套的分布式系统解决方案。spring cloud 为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全居琐，leader选举，分布式session，集群状态）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用．它们将在任何分布式环境中工作，包括开发人员自己的笔记本电脑，裸物理机的数据中心，和像Cloud Foundry云管理平台。在未来引领这微服务架构的发展，提供业界标准的一套微服务架构解决方案。","text":"摘要:Spring Cloud是一个相对比较新的微服务框架，今年(2016)推出1.0的release版本，目前Github上更新速度很快. 虽然Spring Cloud时间最短, 但是相比Dubbo等RPC框架, Spring Cloud提供的全套的分布式系统解决方案。spring cloud 为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全居琐，leader选举，分布式session，集群状态）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用．它们将在任何分布式环境中工作，包括开发人员自己的笔记本电脑，裸物理机的数据中心，和像Cloud Foundry云管理平台。在未来引领这微服务架构的发展，提供业界标准的一套微服务架构解决方案。 1.什么是Spring Cloud？ Spring Cloud是一个相对比较新的微服务框架，今年(2016)才推出1.0的release版本. 虽然Spring Cloud时间最短, 但是相比Dubbo等RPC框架, Spring Cloud提供的全套的分布式系统解决方案。spring cloud 为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全居琐，leader选举，分布式session，集群状态）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用．它们将在任何分布式环境中工作，包括开发人员自己的笔记本电脑，裸物理机的数据中心，和像Cloud Foundry云管理平台。下面是官方对Spring Cloud定义和解释。 Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry. 2.Spring Cloud主要项目 Spring Cloud 侧重于提供良好的开箱即用的功能，以便支持典型的开发场景和扩展支持。下面主要Spring Cloud项目在微服务框架中的主要子项目，具体的子项目源码分析，以及实现细节，将会在后面的文章中介绍。 Spring Cloud Config—配置中心 Spring Cloud Config就是我们通常意义上的配置中心 - 把应用原本放在本地文件的配置抽取出来放在中心服务器，从而能够提供更好的管理、发布。 在RPC服务治理框架中，一般都会开发一个配置中心和ZK配合使用，用于管理分布式应用中的配置信息。比如熔断的阀值，负载均衡的策略等。 Spring Cloud Netflix–注册中心，服务发现，LB Spring Cloud Netflix通过Eureka Server实现服务注册中心(包括服务注册，服务发现)，通过Ribbon实现软负载均衡(load balance,简称LB) 在RPC框架中，例如：dubboX，HSF，OSP(唯品会的RPC框架)等RPC框架，都会通过ZK等实现服务注册，服务发现。当服务启动时，会将服务的IP地址，端口，服务命名，版本号等信心注册到ZK中，同时ZK会把服务注册信息，推送到服务的调用client端或Proxy端。至于LB，都会有自己的实现算法，熔断等都有自己的实现方式。 未完待续—————–","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://blog.xujin.org/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://blog.xujin.org/tags/Spring-Cloud/"}],"keywords":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://blog.xujin.org/categories/Spring-Cloud/"}]},{"title":"Jdk的万能配置","slug":"jdk-install","date":"2016-10-16T10:30:59.481Z","updated":"2016-10-16T10:30:23.121Z","comments":true,"path":"2016/10/16/jdk-install/","link":"","permalink":"http://blog.xujin.org/2016/10/16/jdk-install/","excerpt":"java是通过java虚拟机来解释运行的,也就是通过java命令; javac编译生成的.class文件就是虚拟机要执行的代码, 称之为字节码(bytecode),虚拟机通过classloader来装载这些字节码,也就是通常意义上的类.这里就有一个问题,classloader从哪里知道java本身的类库及用户自己的类在什么地方呢?或者有着缺省值(当前路径).或者要有一个用户指定的变量来表明, 这个变量就是类路径(classpath),或者在运行的时候传参数给虚拟机.通过这段文字，你就知道，为什么javac编译通过了，但是java命令却出错(类定义没找到)的原因了。就是环境变量classpath(类路径)没有设置正确，使得JAVA虚拟机的classloader无法找到类来执行目标程序","text":"java是通过java虚拟机来解释运行的,也就是通过java命令; javac编译生成的.class文件就是虚拟机要执行的代码, 称之为字节码(bytecode),虚拟机通过classloader来装载这些字节码,也就是通常意义上的类.这里就有一个问题,classloader从哪里知道java本身的类库及用户自己的类在什么地方呢?或者有着缺省值(当前路径).或者要有一个用户指定的变量来表明, 这个变量就是类路径(classpath),或者在运行的时候传参数给虚拟机.通过这段文字，你就知道，为什么javac编译通过了，但是java命令却出错(类定义没找到)的原因了。就是环境变量classpath(类路径)没有设置正确，使得JAVA虚拟机的classloader无法找到类来执行目标程序 快速配置1.新建系统变量JAVA_HOME变量(JAVA_HOME指明JDK安装路径。) C:\\Program Files\\Java\\jdk1.6.0_25 2.在系统变量中的path中添加(Path使得系统可以在任何路径下识别java命令。) ;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 3、新建系统变量CLASSPATH(CLASSPATH为java加载类(class or lib)路径，只有类在classpath中，java命令才能识别.) 设定值为：.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar 注意 一定要加“.”，“.”代表当前目录，即可到处建立.java文件，java class都能找到并编译运行用户的.java文件。","categories":[{"name":"java","slug":"java","permalink":"http://blog.xujin.org/categories/java/"}],"tags":[{"name":"Jdk","slug":"Jdk","permalink":"http://blog.xujin.org/tags/Jdk/"},{"name":"Java","slug":"Java","permalink":"http://blog.xujin.org/tags/Java/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.xujin.org/categories/java/"}]}]}